// Generated by CoffeeScript 1.3.3
(function() {
  var CHECK, Map, MapView, animate, canvas, ctx, map, mapView, tiles;

  CHECK = function(condition, message) {
    if (!condition) {
      return console.error("CHECK FAILED: " + message);
    }
  };

  Map = (function() {

    function Map(width, height) {
      var i, _i, _ref;
      this.width = width;
      this.height = height;
      this._map = new Array(this.height);
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this._map[i] = new Array(this.width);
      }
    }

    Map.prototype.get = function(x, y) {
      var cell, row;
      row = this._map[y];
      CHECK(row != null, "0 <= y < " + this.height);
      cell = row[x];
      CHECK(cell != null, "0 <= x < " + this.width);
      return cell;
    };

    Map.prototype.set = function(x, y, value) {
      var row;
      row = this._map[y];
      CHECK(row != null, "0 <= y < " + this.height);
      return row[x] = value;
    };

    Map.prototype.foreach = function(cb) {
      var x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(cb(x, y));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Map;

  })();

  MapView = (function() {

    function MapView(map, tileImage, tileSize, tileScale) {
      this.map = map;
      this.tileImage = tileImage;
      this.tileSize = tileSize;
      this.tileScale = tileScale != null ? tileScale : 1;
    }

    MapView.prototype.draw = function(ctx) {
      var _this = this;
      return this.map.foreach(function(x, y) {
        var D, S, dx, dy, sx, sy, tx, ty;
        S = _this.tileSize;
        tx = 1;
        ty = 0;
        sx = tx * S;
        sy = ty * S;
        D = S * _this.tileScale;
        dx = x * D;
        dy = y * D;
        return ctx.drawImage(_this.tileImage, sx, sy, S, S, dx, dy, D, D);
      });
    };

    return MapView;

  })();

  canvas = document.createElement('canvas');

  canvas.width = 800;

  canvas.height = 400;

  canvas.id = 'canvas';

  document.body.appendChild(canvas);

  ctx = canvas.getContext('2d');

  CHECK(ctx, 'Got 2D context');

  tiles = new Image();

  tiles.src = 'dustycraft-tiles.png';

  map = new Map(10, 10);

  mapView = new MapView(map, tiles, 32);

  animate = function() {
    mapView.draw(ctx);
    return requestAnimationFrame(animate);
  };

  requestAnimationFrame(animate);

  document.unselectable = 'on';

  document.body.style.userSelect = 'none';

  document.addEventListener('selectstart', function() {
    return false;
  });

}).call(this);
