// Generated by CoffeeScript 1.3.3
(function() {
  var CHECK, HoverMapView, Map, MapView, TILE_HEIGHT, TILE_SIZE, TILE_WIDTH, TileMapView, TileSources, Tiles, animate, buildWorld, canvas, ctx, hoverMapView, map, tileMapView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CHECK = function(condition, message) {
    if (!condition) {
      return console.error("CHECK FAILED: " + message);
    }
  };

  Map = (function() {

    function Map(width, height) {
      var i, _i, _ref;
      this.width = width;
      this.height = height;
      this._map = new Array(this.height);
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this._map[i] = new Array(this.width);
      }
    }

    Map.prototype.get = function(x, y) {
      var cell, row;
      row = this._map[y];
      CHECK(row != null, "0 <= y < " + this.height);
      cell = row[x];
      CHECK(cell != null, "0 <= x < " + this.width);
      return cell;
    };

    Map.prototype.set = function(x, y, value) {
      var row;
      row = this._map[y];
      CHECK(row != null, "0 <= y < " + this.height);
      return row[x] = value;
    };

    Map.prototype.foreach = function(cb) {
      var x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(cb(x, y));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Map;

  })();

  TileSources = {};

  TileSources.dusty = new Image();

  TileSources.dusty.src = 'dustycraft-tiles.png';

  TileSources.dwarves = new Image();

  TileSources.dwarves.src = 'rpgmaker-dwarves.png';

  Tiles = {
    sky: ['dusty', 2, 11],
    grass: ['dusty', 3, 0],
    dirt: ['dusty', 2, 0],
    rock: ['dusty', 1, 0],
    coal: ['dusty', 2, 2],
    gold: ['dusty', 0, 2],
    silver: ['dusty', 2, 3],
    dwarf: ['dwarves', 1, 0]
  };

  MapView = (function() {

    function MapView(map, pixelSize, scale) {
      this.map = map;
      this.pixelSize = pixelSize;
      this.scale = scale != null ? scale : 1;
      this.screenSize = this.pixelSize * this.scale;
      this.init();
    }

    MapView.prototype.init = function() {};

    MapView.prototype.tileToScreenCoords = function(tileX, tileY) {
      var D;
      D = this.screenSize;
      return [tileX * D, tileY * D];
    };

    MapView.prototype.screenToTileCoords = function(mouseX, mouseY) {
      var D;
      D = this.screenSize;
      return [Math.floor(mouseX / D), Math.floor(mouseY / D)];
    };

    return MapView;

  })();

  TileMapView = (function(_super) {

    __extends(TileMapView, _super);

    function TileMapView() {
      return TileMapView.__super__.constructor.apply(this, arguments);
    }

    TileMapView.prototype.draw = function(ctx) {
      var _this = this;
      return this.map.foreach(function(x, y) {
        var contents, obj, source, sx, sy, tuple;
        obj = _this.map.get(x, y);
        contents = obj.contents;
        if (y === 1 && contents === 'dirt') {
          contents = 'grass';
        }
        tuple = Tiles[contents];
        CHECK(tuple, "Tiles[" + contents + "]");
        source = tuple[0], sx = tuple[1], sy = tuple[2];
        return _this.drawTile(ctx, source, sx, sy, x, y);
      });
    };

    TileMapView.prototype.drawTile = function(ctx, source, sx, sy, dx, dy) {
      var D, S, dpx, dpy, img, spx, spy;
      S = this.pixelSize;
      spx = sx * S;
      spy = sy * S;
      D = this.screenSize;
      dpx = dx * D;
      dpy = dy * D;
      CHECK(source in TileSources, "TileSources[" + source + "] OK");
      img = TileSources[source];
      return ctx.drawImage(img, spx, spy, S, S, dpx, dpy, D, D);
    };

    return TileMapView;

  })(MapView);

  HoverMapView = (function(_super) {

    __extends(HoverMapView, _super);

    function HoverMapView() {
      return HoverMapView.__super__.constructor.apply(this, arguments);
    }

    HoverMapView.prototype.init = function() {
      HoverMapView.__super__.init.call(this);
      this.location = null;
      this.pressed = false;
      return this.color = 'cyan';
    };

    HoverMapView.prototype.hover = function(screenX, screenY) {
      return this.location = this.screenToTileCoords(screenX, screenY);
    };

    HoverMapView.prototype.blur = function(screenX, screenY) {
      return this.location = null;
    };

    HoverMapView.prototype.up = function() {
      return this.pressed = false;
    };

    HoverMapView.prototype.down = function() {
      return this.pressed = true;
    };

    HoverMapView.prototype.draw = function(ctx) {
      var corner, oldAlpha;
      if (this.location === null) {
        return;
      }
      oldAlpha = ctx.globalAlpha;
      if (this.pressed) {
        ctx.globalAlpha = 0.7;
      } else {
        ctx.globalAlpha = 0.3;
      }
      corner = this.tileToScreenCoords(this.location[0], this.location[1]);
      ctx.fillStyle = this.color;
      ctx.fillRect(corner[0], corner[1], this.screenSize, this.screenSize);
      return ctx.globalAlpha = oldAlpha;
    };

    return HoverMapView;

  })(MapView);

  buildWorld = function(width, height) {
    var map;
    map = new Map(width, height);
    map.foreach(function(x, y) {
      var obj;
      obj = {
        contents: 'dirt',
        seen: false,
        dug: false
      };
      if (y === 0) {
        obj.contents = 'sky';
        obj.seen = true;
        obj.dug = true;
      }
      if (y === 1) {
        obj.seen = true;
      }
      return map.set(x, y, obj);
    });
    return map;
  };

  TILE_WIDTH = 20;

  TILE_HEIGHT = 12;

  TILE_SIZE = 32;

  canvas = document.createElement('canvas');

  canvas.width = TILE_WIDTH * TILE_SIZE;

  canvas.height = TILE_HEIGHT * TILE_SIZE;

  canvas.id = 'canvas';

  document.body.appendChild(canvas);

  ctx = canvas.getContext('2d');

  CHECK(ctx, 'Got 2D context');

  map = buildWorld(TILE_WIDTH, TILE_HEIGHT);

  tileMapView = new TileMapView(map, TILE_SIZE);

  hoverMapView = new HoverMapView(map, TILE_SIZE);

  canvas.addEventListener('mousedown', function(e) {
    hoverMapView.down(e.offsetX, e.offsetY);
    return false;
  });

  canvas.addEventListener('mouseup', function(e) {
    hoverMapView.up(e.offsetX, e.offsetY);
    return false;
  });

  canvas.addEventListener('mousemove', function(e) {
    hoverMapView.hover(e.offsetX, e.offsetY);
    return false;
  });

  canvas.addEventListener('mouseleave', function(e) {
    hoverMapView.blur();
    return false;
  });

  animate = function() {
    tileMapView.draw(ctx);
    hoverMapView.draw(ctx);
    return requestAnimationFrame(animate);
  };

  requestAnimationFrame(animate);

  document.unselectable = 'on';

  document.body.style.userSelect = 'none';

  document.addEventListener('selectstart', function() {
    return false;
  });

}).call(this);
